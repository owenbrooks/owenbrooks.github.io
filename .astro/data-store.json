[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.0","content-config-digest","a056772b23970fa2","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://owenbrooks.org\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{\"/\":{\"status\":302,\"destination\":\"/blog\"}},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"one-dark-pro\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"macho",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"rendered":20},{"title":14,"description":15,"pubDate":16},"Constructing a Valid Mach-O Executable","What is the simplest executable we can make run on MacOS?",["Date","2025-07-22T14:00:00.000Z"],"The Mach-O file format is the binary file format of executables on MacOS and iOS. The aim of this post is not just to explain the general structure of a Mach-O file, but also to detail which specific components are required to be present in the file for a modern[^1] MacOS kernel to agree to load and execute it. Weâ€™ll write some Rust code to generate the bytes that make up a Mach-O file, building up from machine code until we have an executable file.\n\n[^1]: MacOS Sonoma 14.4 running on an M1 MacBook Pro\n\n---\n\nFirst, we need that machine code. We're going to make the smallest program that will have some sort of side effect to tell us whether it ran. Let's make a program that does nothing but return an exit code. Here it is in ARM64 assembly:\n```asm\n.global _main\n\n_main:\n    mov     x0, 64\n    mov     x16, 1\n    svc     0x80\n```\n- We move 64 into the `x0` register. This means our exit code will be 64.\n- We move 1 into the `x16` register. This is the identifier for the [`EXIT` system call](https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/bsd/kern/syscalls.master#L46).\n- Then we execute the `svc` instruction to tell the processor that we want to do a syscall. `0x80` is [conventionally passed as the immediate](https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/libsyscall/custom/SYS.h#L248).\n\nTo get the corresponding machine code, we could consult the [Arm A-profile A64 Instruction Set Architecture](https://developer.arm.com/documentation/ddi0602/2025-03) and encode the instructions manually, but we'll take a shortcut and get the `as` assembler to do this for us:\n```\n$ as -o exit_syscall.o exit_syscall.S\n```\nAnd use `objdump` to print out the contents:\n```\n$ objdump ./exit_syscall.o --disassemble\n\n./exit_syscall.o:       file format mach-o arm64\n\nDisassembly of section __TEXT,__text:\n\n0000000000000000 \u003Cltmp0>:\n       0: d2800800      mov     x0, #64\n       4: d2800030      mov     x16, #1\n       8: d4001001      svc     #0x80\n```\nThis means the machine code for our 3-instruction program is `[d2800800, d2800030, d4001001]`.\nNow to figure out how we can put those instructions into our own Mach-O file!\n\n## Mach-O File Format\n\nWe have two primary sources for info on Mach-O files:\n- the XNU kernel code [xnu/EXTERNAL_HEADERS/macho/loader.h](https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/EXTERNAL_HEADERS/mach-o/loader.h) - which contains structure definitions, and explanations in the form of comments\n- the [OS X ABI Mach-O File Format Reference](https://web.archive.org/web/20140904004108/https://developer.apple.com/library/mac/documentation/developertools/conceptual/MachORuntime/Reference/reference.html) - which contains diagrams but is out of date - it was last online in late 2014, prior to the release of OS X 10.10 Yosemite\n\nSynthesising some information from the above sources, a Mach-O file consists of:\n- a header\n- some 'Load Commands' that define the structure of the data in the file and how it is to be loaded into memory\n- data that is referenced by the Load Commands\n\n\u003Ctable class=\"macho-table\" style=\"margin-inline: auto; width: 25rem;\">\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;\">file header\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;vertical-align: middle;\">load commands\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;\">data\u003C/td>\n  \u003C/tr>\n\u003C/table>\n\nEach Mach-O is divided into a number of named areas called 'segments' that are loaded into memory as contiguous blocks, and data in a segment may be further divided into named 'sections'. For example, the `__TEXT` segment (note the uppercase name) contains the Mach-O header, load commands, and executable code, while the `__text` section (lowercase) within that segment refers to just the executable code. This is why `objdump` told us we were looking at the 'Disassembly of the `__TEXT,__text` section' earlier. We will explain other segments and sections as we come across the need for them.\n\n\u003Ctable class=\"macho-table\">\n  \u003Ctr>\n    \u003Ctd rowspan=\"3\" style=\"background-color: #ff7340; vertical-align: middle; text-align: center;\">__TEXT segment\u003C/td>\n    \u003Ctd style=\"background-color: #ffb276;\">file header\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;vertical-align: middle;\">load commands\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;\">__text section data\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ff7340; text-align: center;\">__LINKEDIT segment\u003C/td>\n    \u003Ctd style=\"background-color: #ffb276;\">code signature data\u003C/td>\n  \u003C/tr>\n\u003C/table>\n\n### Header\nThis is defined as the `mach_header_64` struct in [`loader.h`](https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/EXTERNAL_HEADERS/mach-o/loader.h):\n```rust\nstruct MachHeader64 {\n    magic: u32,      // mach magic number identifier\n    cputype: u32,    // cpu specifier\n    cpusubtype: u32, // machine specifier\n    filetype: u32,   // type of file\n    ncmds: u32,      // number of load commands\n    sizeofcmds: u32, // the size of all the load commands\n    flags: u32,      // flags\n    reserved: u32,   // reserved\n}\n```\n\nOur header will look like this, at least to start with:\n```rust\nlet mut header = MachHeader64 {\n    magic: MH_MAGIC_64,              // these bytes tell the OS it is a Mach-O file\n    cputype: CPU_TYPE_ARM64,         // since we are running on an M1 mac\n    cpusubtype: CPU_SUBTYPE_ARM_ALL, // ^ as above\n    filetype: MH_EXECUTE,            // we want a file that the OS can execute\n    ncmds: 0,                        // will be incremented as we go\n    sizeofcmds: 0,                   // will be incremented as we go\n    flags: 0,                        // we don't know what flags to include yet\n    reserved: 0,\n};\n```\nWe'll also add a counter that tells us the total length of the file:\n```rust\nlet mut bytes_reserved = 0;\nbytes_reserved += std::mem::size_of::\u003CMachHeader64>();\n```\n\n### Load Commands, Segments and Sections\nAbove we learned that our machine code should go in the `__text` section, inside a `__TEXT` segment. We can create a segment using the `LC_SEGMENT_64` load command, and follow it with a `section64` header:\n\n```rust\nstruct SegmentCommand64 {\n    cmd: u32,          // LC_SEGMENT_64\n    cmdsize: u32,      // includes sizeof section_64 structs\n    segname: [u8; 16], // segment name\n    vmaddr: u64,       // memory address of this segment\n    vmsize: u64,       // memory size of this segment\n    fileoff: u64,      // file offset of this segment\n    filesize: u64,     // amount to map from the file\n    maxprot: u32,      // maximum vm protection\n    initprot: u32,     // initial vm protection\n    nsects: u32,       // number of sections in segment\n    flags: u32,\n}\n\nstruct Section64 {\n    sectname: [u8; 16], // e.g. __text\n    segname: [u8; 16],  // must match the segment to which it belongs\n    addr: u64,          // virtual memory address\n    size: u64,          // size once loaded into memory\n    offset: u32,        // file offset of the section data\n    align: u32,\n    reloff: u32,\n    nreloc: u32,\n    flags: u32,\n    reserved1: u32,\n    reserved2: u32,\n    reserved3: u32,\n}\n```\n\nWe'll fill ours in like this:\n```rust\nlet text_section_data: [u32; 3] = [0xd2800800, 0xd2800030, 0xd4001001];\n\nlet text_segment_vmaddr = 0x100000000;\nlet mut text_segment_lc = SegmentCommand64 {\n    cmd: LC_SEGMENT_64,\n    cmdsize: std::mem::size_of::\u003CSegmentCommand64>() as u32\n        + std::mem::size_of::\u003CSection64>() as u32,\n    segname: *b\"__TEXT\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\",\n    vmaddr: text_segment_vmaddr,\n    vmsize: 0x0,   // filled in later\n    fileoff: 0x0,  // __TEXT segment begins at the very start of the file\n    filesize: 0x0, // filled in later\n    maxprot: VM_PROT_READ | VM_PROT_EXECUTE,\n    initprot: VM_PROT_READ | VM_PROT_EXECUTE,\n    nsects: 1,\n    flags: 0x0,\n};\ntext_segment_lc.filesize =\n    text_segment_lc.cmdsize as u64 + std::mem::size_of_val(&text_section_data) as u64;\ntext_segment_lc.vmsize = align(text_segment_lc.filesize, 0x4000);\nbytes_reserved += std::mem::size_of_val(&text_segment_lc);\n\nlet mut text_section_header = Section64 {\n    sectname: *b\"__text\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\",\n    segname: *b\"__TEXT\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\",\n    addr: 0x0, // filled in later\n    size: std::mem::size_of_val(&text_section_data) as u64,\n    offset: 0x0, // filled in later\n    align: 0x2,\n    reloff: 0x0,\n    nreloc: 0x0,\n    flags: 0x80000400,\n    reserved1: 0x0,\n    reserved2: 0x0,\n    reserved3: 0x0,\n};\nbytes_reserved += std::mem::size_of_val(&text_section_header);\ntext_section_header.offset = bytes_reserved as u32;\n```\nAnd update the file header:\n```rust\nheader.ncmds += 1;\nheader.sizeofcmds += text_segment_lc.cmdsize;\n```\nFinally we write all this to a file and make it executable:\n```rust\nlet mut output = File::create(\"return64\")?;\noutput.write_all(bytes_of(&header))?;\noutput.write_all(bytes_of(&text_segment_lc))?;\noutput.write_all(bytes_of(&text_section_header))?;\noutput.write_all(bytes_of(&text_section_data))?;\nlet executable = Permissions::from_mode(0o755);\nstd::fs::set_permissions(\"return64\", executable)?;\n```\n\nAwesome, it has been a bit of work to get to this stage, but by now we have a Mach-O executable with a header, a `__TEXT` segment, and inside that a `__text` section containing our machine code. `otool` can show us the details and doesn't complain:\n```\n$ otool -lhtv return64\nreturn64:\nMach header\n      magic  cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\nMH_MAGIC_64    ARM64        ALL  0x00     EXECUTE     1        152 0x00000000\nLoad command 0\n      cmd LC_SEGMENT_64\n  cmdsize 152\n  segname __TEXT\n   vmaddr 0x0000000000000000\n   vmsize 0x0000000000004000\n  fileoff 0\n filesize 164\n  maxprot ---\n initprot ---\n   nsects 1\n    flags (none)\nSection\n  sectname __text\n   segname __TEXT\n      addr 0x0000000000000000\n      size 0x000000000000000c\n    offset 184\n     align 2^0 (1)\n    reloff 0\n    nreloc 0\n      type S_REGULAR\nattributes (none)\n reserved1 0\n reserved2 0\n(__TEXT,__text) section\n0000000000000000        mov     x0, #0x40\n0000000000000004        mov     x16, #0x1\n0000000000000008        svc     #0x80\n```\n\nLet's try to run it!\n```\n$ ./return64\nKilled: 9\n```\nOh. I guess it wasn't going to be that easy.\n\n## Secrets of mach_loader.c \nTo figure out the rest of the requirements we will need to dive into the source code that Apple provides for the XNU kernel, specifically the `parse_machfile()` function in [`mach_loader.c`](https://github.com/apple-oss-distributions/xnu/blob/e3723e1f17661b24996789d8afc084c0c3303b26/bsd/kern/mach_loader.c#L140).\n\nHere are the relevant excerpts:\n\n```c\nif (header->flags & MH_DYLDLINK) {\n    /* Check properties of dynamic executables */\n    if (!(header->flags & MH_PIE) && pie_required(header->cputype, header->cpusubtype & ~CPU_SUBTYPE_MASK)) {\n        return LOAD_FAILURE;\n    }\n    result->needs_dynlinker = TRUE;\n} \n...\n} else {\n...\n    return LOAD_FAILURE;\n}\n```\nThis tells us we must set the DYLD_LINK and MH_PIE flags in the file header.\n\n```c\ncase LC_LOAD_DYLINKER:\n    ...\n        dlp = (struct dylinker_command *)lcp;\n    ...\n\n// combined with:\nif (ret == LOAD_SUCCESS) {\n    ...\n    /* Make sure if we need dyld, we got it */\n    if (result->needs_dynlinker && !dlp) {\n        ret = LOAD_FAILURE;\n    }\n}\n```\nWe need a LOAD_DYLINKER load command.\n\n```c\nif (ret == LOAD_SUCCESS && scp64->fileoff == 0 && scp64->filesize > 0) {\n    /* Enforce a single segment mapping offset zero, with R+X\n     * protection. */\n    if (found_header_segment ||\n        ((scp64->initprot & (VM_PROT_READ | VM_PROT_EXECUTE)) != (VM_PROT_READ | VM_PROT_EXECUTE))) {\n        ret = LOAD_BADMACHO;\n        break;\n    }\n    found_header_segment = TRUE;\n}\n```\nThe first segment we load must have initprot set to READ and EXECUTE.\n\n```c\nif ((file_offset & PAGE_MASK_64) != 0 ||\n    /* we can't mmap() it if it's not page-aligned in the file */\n    ...\n    return LOAD_BADMACHO;\n}\n```\nAll segments must be aligned to an offset in the file that is a multiple of the 16kiB page size. This is already the case since the `__TEXT` segment has offset 0, but we will need to take this into account when adding more segments.\n\n```c\nif (!got_code_signatures && cs_process_global_enforcement()) {\n    ret = LOAD_FAILURE;\n}\n// combined with\ncase LC_CODE_SIGNATURE:\n    /* CODE SIGNING */\n    ...\n        got_code_signatures = TRUE;\n    ...\n```\nWe need a CODE_SIGNATURE load command.\n\n```c\nif (result->thread_count == 0) {\n    ret = LOAD_FAILURE;\n}\n// combined with\nstatic load_return_t load_main(... )\n{\n...\n    result->thread_count++;\n...\n```\nWe need LC_MAIN or LC_UNIXTHREAD. We choose LC_MAIN over LC_UNIXTHREAD as it is simpler.\n\n```c\nif (enforce_hard_pagezero &&\n    /* 64 bit ARM binary must have \"hard page zero\" of 4GB to cover the lower 32 bit address space */\n    (vm_map_has_hard_pagezero(map, 0x100000000) == FALSE)) {\n...\n        return LOAD_BADMACHO;\n    }\n}\n```\nWe need a 'PAGEZERO' segment.\n\n```c\nif (scp->initprot == 0 && scp->maxprot == 0 && scp->vmaddr == 0) {\n    /* PAGEZERO */\n    if (os_add3_overflow(scp->vmaddr, scp->vmsize, slide, &pagezero_end) || pagezero_end > UINT32_MAX) {\n        ret = LOAD_BADMACHO;\n        break;\n    }\n}\n```\nThe PAGEZERO segment must have `initprot` and `maxprot` set to `VM_PROT_NONE` (0).\n\nSummarising, we need to add:\n- `__PAGEZERO` segment of size 4GB, starting at vmaddr of 0x0, with initprot and maxprot set to 0\n- `LC_MAIN` load command\n- `LC_LOAD_DYLINKER` load command\n- `LC_CODE_SIGNATURE` load command\n\nGoing through those:\n`__PAGEZERO` is straightforward, it is just another `LC_SEGMENT_64` command:\n```rust\nlet pagezero_seg_lc = SegmentCommand64 {\n    cmd: LC_SEGMENT_64,\n    cmdsize: std::mem::size_of::\u003CSegmentCommand64>() as u32,\n    segname: *b\"__PAGEZERO\\0\\0\\0\\0\\0\\0\",\n    vmaddr: 0x0,\n    vmsize: 0x100000000,\n    fileoff: 0x0,  // empty so we don't need an offset\n    filesize: 0x0, // empty so we don't need a physical size\n    maxprot: 0x0,  // must be VM_PROT_NONE for PAGEZERO\n    initprot: 0x0, // must be VM_PROT_NONE for PAGEZERO\n    nsects: 0,     // doesn't contain any sections\n    flags: 0x0,\n};\nbytes_reserved += std::mem::size_of_val(&pagezero_seg_lc);\nheader.ncmds += 1;\nheader.sizeofcmds += pagezero_seg_lc.cmdsize;\n```\n\nFor `LC_MAIN`, we just need to make sure we compute the correct file offset of the `__text` section data:\n```rust\nbytes_reserved += std::mem::size_of::\u003CEntryPointCommand>();\ntext_section_header.addr = (bytes_reserved as u64 + text_segment_vmaddr) as u64;\nlet mut main_lc = EntryPointCommand {\n    cmd: LC_MAIN,\n    cmdsize: std::mem::size_of::\u003CEntryPointCommand>() as u32,\n    entryoff: 0,  // Updated later\n    stacksize: 0, // if we put zero, the kernel fills it with a default value\n};\nheader.ncmds += 1;\nheader.sizeofcmds += main_lc.cmdsize;\n```\n\nWe can fix our flags as so:\n```rust\nheader.flags = MH_PIE | MH_DYLDLINK;\n```\n\nAdd `LC_LOAD_DYLINKER`:\n```rust\nlet dylinker_name = \"/usr/lib/dyld\".to_string();\nlet padded_cmd_len = align(\n    std::mem::size_of::\u003CDylinkerCommand>() as u64 + dylinker_name.len() as u64,\n    8,\n); // cmdsize must be a multiple of 8, so we add padding\nlet padded_name_len = padded_cmd_len as usize - std::mem::size_of::\u003CDylinkerCommand>();\nlet mut padded_dylinker_name = vec![0; padded_name_len];\npadded_dylinker_name[..dylinker_name.len()].copy_from_slice(&dylinker_name.as_bytes());\n\nlet dylinker_lc = DylinkerCommand {\n    cmd: LC_LOAD_DYLINKER,\n    cmdsize: (std::mem::size_of::\u003CDylinkerCommand>() + padded_dylinker_name.len()) as u32,\n    name: std::mem::size_of::\u003CDylinkerCommand>() as u32,\n};\nbytes_reserved += dylinker_lc.cmdsize as usize;\nheader.ncmds += 1;\nheader.sizeofcmds += dylinker_lc.cmdsize;\n```\n\n## Sign here please - Adding a code signature\nThe code signature is another story. All binaries are required to be signed before they are run. For programs that will be distributed, this would be performed using an official Apple Developer account, but there is a type of signature called an 'ad-hoc' signature that allows a program to run on your computer only. You can read [llios/macho_parser](https://github.com/qyang-nj/llios/blob/main/macho_parser/docs/LC_CODE_SIGNATURE.md) for details on the format of code signatures, as we will delegate code signing to the [rcodesign](https://gregoryszorc.com/docs/apple-codesign/0.17.0/apple_codesign_getting_started.html#installing) utility that has re-implemented Apple's code signing process. It doesn't do all the work for us: it can only replace an existing signature, so we must write our own empty one first and place it in the `__LINKEDIT` segment.\n\nFirst we create the `__LINKEDIT` segment:\n```rust\nlet mut linkedit_seg_lc = SegmentCommand64 {\n    cmd: LC_SEGMENT_64,\n    cmdsize: std::mem::size_of::\u003CSegmentCommand64>() as u32,\n    segname: *b\"__LINKEDIT\\0\\0\\0\\0\\0\\0\",\n    vmaddr: text_segment_lc.vmaddr + text_segment_lc.vmsize,\n    vmsize: 0x4000,\n    fileoff: 0,  // Updated later\n    filesize: 0, // Updated later\n    maxprot: 0x0,\n    initprot: 0x0,\n    nsects: 0,\n    flags: 0,\n};\nbytes_reserved += linkedit_seg_lc.cmdsize as usize;\nheader.ncmds += 1;\nheader.sizeofcmds += linkedit_seg_lc.cmdsize;\n```\n\nThen we create a load command for the code signature:\n```rust\nlet mut codesig_lc = LinkeditDataCommand {\n    cmd: LC_CODE_SIGNATURE,\n    cmdsize: std::mem::size_of::\u003CLinkeditDataCommand>() as u32,\n    dataoff: 0,  // Updated later\n    datasize: 0, // Updated later\n};\nheader.ncmds += 1;\nheader.sizeofcmds += codesig_lc.cmdsize;\nbytes_reserved += codesig_lc.cmdsize as usize;\n```\n\nSince this is now the final load command, we update the text section offset:\n```rust\ntext_section_header.offset = bytes_reserved as u32;\nbytes_reserved += std::mem::size_of_val(&text_section_data);\nmain_lc.entryoff = text_section_header.offset as u64;\ntext_section_header.addr = (text_section_header.offset as u64 + text_segment_vmaddr) as u64;\n```\n\nTo ensure that the start of the `__LINKEDIT` segment is page-aligned, we must add padding to the end of the `__TEXT` segment:\n```rust\nlet text_sec_end = align(\n    text_section_header.offset as u64 + text_section_data.len() as u64,\n    0x4000,\n);\nlet text_seg_padding_len =\n    text_sec_end - text_section_header.offset as u64 - size_of_val(&text_section_data) as u64;\nbytes_reserved += text_seg_padding_len as usize;\ntext_segment_lc.filesize = bytes_reserved as u64;\nif text_segment_lc.filesize % 0x4000 != 0 {\n    text_segment_lc.vmsize = align(text_segment_lc.filesize, 0x4000);\n}\n```\n\nNow we add a placeholder for the code signature, to satisfy `rcodesign`:\n```rust\nlet mut codesig = [0; 16];\nlet superblob_length: u32 = 12;\nlet superblob_count: u32 = 0;\ncodesig[0..4].copy_from_slice(&CSMAGIC_EMBEDDED_SIGNATURE.to_be_bytes());\ncodesig[4..8].copy_from_slice(&superblob_length.to_be_bytes());\ncodesig[8..12].copy_from_slice(&superblob_count.to_be_bytes());\n// Update linkedit details\nlinkedit_seg_lc.fileoff = bytes_reserved as u64;\nlinkedit_seg_lc.filesize = codesig.len() as u64;\ncodesig_lc.dataoff = bytes_reserved as u32;\ncodesig_lc.datasize = codesig.len() as u32;\n```\n\nWe write the binary to a file, much like before:\n```rust\nlet mut output = File::create(\"return64\")?;\noutput.write_all(bytes_of(&header))?;\noutput.write_all(bytes_of(&text_segment_lc))?;\noutput.write_all(bytes_of(&text_section_header))?;\noutput.write_all(bytes_of(&pagezero_seg_lc))?;\noutput.write_all(bytes_of(&main_lc))?;\noutput.write_all(bytes_of(&dylinker_lc))?;\noutput.write_all(&padded_dylinker_name)?;\noutput.write_all(bytes_of(&linkedit_seg_lc))?;\noutput.write_all(bytes_of(&codesig_lc))?;\noutput.write_all(bytes_of(&dysymtab_lc))?;\noutput.write_all(bytes_of(&symtab_lc))?;\noutput.write_all(bytes_of(&text_section_data))?;\noutput.write_all(&vec![0; text_seg_padding_len as usize])?;\noutput.write_all(&codesig)?;\nlet executable = Permissions::from_mode(0o755);\nstd::fs::set_permissions(\"return64\", executable)?;\n```\n\nFinally we can perform the code signing step:\n```rust\nlet file_bytes = std::fs::read(\"return64\")?;\nlet signer = apple_codesign::MachOSigner::new(&file_bytes)?;\nlet mut output = File::create(\"return64\")?;\nlet mut settings = SigningSettings::default();\nsettings.set_binary_identifier(SettingsScope::Main, \"com.simple_macho.return64\");\nsigner.write_signed_binary(&settings, &mut output)?;\n```\n\nRunning the resulting binary does not quite work:\n```\n$ ./return64\nSegmentation fault: 11\n\n$ lldb return64\n(lldb) target create \"return64\"\nCurrent executable set to '/simple_macho/return64' (arm64).\n(lldb) run\nProcess 16199 launched: '/simple_macho/return64' (arm64)\nProcess 16199 stopped\n* thread #1, stop reason = EXC_BAD_ACCESS (code=1, address=0x48)\n    frame #0: 0x000000019102770c dyld`dyld3::MachOAnalyzer::forEachRebase_Relocations(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&) block_pointer) const + 120\ndyld`dyld3::MachOAnalyzer::forEachRebase_Relocations:\n->  0x19102770c \u003C+120>: ldr    w2, [x8, #0x48]\n    0x191027710 \u003C+124>: mov    x0, x20\n    0x191027714 \u003C+128>: mov    x1, x24\n    0x191027718 \u003C+132>: bl     0x19101b51c               ; dyld3::MachOLoaded::getLinkEditContent(dyld3::MachOLoaded::LayoutInfo const&, unsigned int) const\nTarget 0: (return64) stopped.\n```\n## SYMTAB and DYSYMTAB\nWe seem to be getting a null pointer dereference inside DYLD, the dynamic loader. I couldn't track down any documentation explicitly stating this, but experimentation confirms that DYLD requires DYSYMTAB and SYMTAB load commands to be present. Luckily, we can create empty tables, by adding these load commands:\n```rust\nlet dysymtab_lc = DysymtabCommand {\n    cmd: LC_DYSYMTAB,\n    cmdsize: std::mem::size_of::\u003CDysymtabCommand>() as u32,\n    ilocalsym: 0,\n    nlocalsym: 0,\n    iextdefsym: 0,\n    nextdefsym: 0,\n    iundefsym: 0,\n    nundefsym: 0,\n    tocoff: 0,\n    ntoc: 0,\n    modtaboff: 0,\n    nmodtab: 0,\n    extrefsymoff: 0,\n    nextrefsyms: 0,\n    indirectsymoff: 0,\n    nindirectsyms: 0,\n    extreloff: 0,\n    nextrel: 0,\n    locreloff: 0,\n    nlocrel: 0,\n};\nheader.ncmds += 1;\nheader.sizeofcmds += dysymtab_lc.cmdsize;\nbytes_reserved += dysymtab_lc.cmdsize as usize;\n\nlet symtab_lc = SymtabCommand {\n    cmd: LC_SYMTAB,\n    cmdsize: std::mem::size_of::\u003CSymtabCommand>() as u32,\n    symoff: 0,\n    nsyms: 0,\n    stroff: 0,\n    strsize: 0,\n};\nheader.ncmds += 1;\nheader.sizeofcmds += symtab_lc.cmdsize;\nbytes_reserved += symtab_lc.cmdsize as usize;\n\n...\nlet mut output = File::create(\"return64\")?;\noutput.write_all(bytes_of(&header))?;\n...\noutput.write_all(bytes_of(&codesig_lc))?;\noutput.write_all(bytes_of(&dysymtab_lc))?;\noutput.write_all(bytes_of(&symtab_lc))?;\noutput.write_all(bytes_of(&text_section_data))?;\n...\n\n```\n## At last, a working executable\nWe can run the program and print its return code:\n```\n$ ./return64\n$ echo $?\n64\n```\nThe final file consists of:\n\n\u003Ctable class=\"macho-table\">\n  \u003Ctr>\n    \u003Ctd rowspan=\"10\" style=\"background-color: #ff7340; vertical-align: middle; text-align: center;\">__TEXT segment\u003C/td>\n    \u003Ctd colspan=\"3\" style=\"background-color: #ffb276;\">file header\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd rowspan=\"8\" style=\"background-color: #ffb276;vertical-align: middle;\">load commands\u003C/td>\n    \u003Ctd>LC_SEGMENT_64 (__TEXT)\u003C/td>\n    \u003Ctd style=\"background-color: white;\">Section Header (__text)\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_SEGMENT_64 (__PAGEZERO)\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_MAIN\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_LOAD_DYLINKER\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_SEGMENT_64 (__LINKEDIT)\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_CODE_SIGNATURE\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_DYSYMTAB\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_SYMTAB\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"3\" style=\"background-color: #ffb276;\">__text section\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ff7340; text-align: center;\">__LINKEDIT segment\u003C/td>\n    \u003Ctd colspan=\"3\" style=\"background-color: #ffb276;\">code signature\u003C/td>\n  \u003C/tr>\n\u003C/table>\n\nThis is the simplest valid Mach-O executable that I could construct.\n\n#### Other Resources on Mach-O Files\n\n##### Mach-O General\n\n- https://alexdremov.me/mystery-of-mach-o-object-file-builders/\n- https://web.archive.org/web/20140904004108/https://developer.apple.com/library/mac/documentation/developertools/conceptual/MachORuntime/Reference/reference.html\n- https://www.reinterpretcast.com/hello-world-mach-o\n- https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html - Unforunately a bit old and therefore x86_64-centric\n- https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html\n- https://lief.re/doc/latest/tutorials/11_macho_modification.html\n- https://www.objc.io/issues/6-build-tools/mach-o-executables/\n- https://www.symbolcrash.com/2019/02/25/so-you-want-to-be-a-mach-o-man/\n- https://lowlevelbits.org/parsing-mach-o-files/\n- https://github.com/opensource-apple/dyld/blob/master/src/ImageLoaderMachO.cpp\n- https://blog.xpnsec.com/building-a-mach-o-memory-loader-part-1/\n- Tried this machodump tool https://github.com/RedMapleTech/machodump\n\n##### Similar attempts to create valid Mach-O files\n- https://stackoverflow.com/questions/68977603/handmade-macos-executable?rq=3\n- https://stackoverflow.com/questions/39863112/what-is-required-for-a-mach-o-executable-to-load\n- https://stackoverflow.com/questions/74659322/why-is-hello-world-in-assembly-for-arm-mac-invalid\n- https://codegolf.stackexchange.com/questions/102471/smallest-possible-runnable-mach-o-executable\n- https://stackoverflow.com/questions/71723764/why-does-macos-kill-static-executables-created-by-clang\n- https://seriot.ch/projects/hello_macho.html\n\n##### Mach-O Codesigning\n- https://knight.sc/reverse%20engineering/2019/02/20/syspolicyd-internals.html\n- https://hexiosec.com/blog/macho-files/\n- https://gregoryszorc.com/docs/apple-codesign/0.17.0/apple_codesign_gatekeeper.html\n- https://github.com/Homebrew/brew/issues/9082\n- https://github.com/nodejs/node/issues/40827\n\n##### Assembly and syscalls\n- https://github.com/jdshaffer/Apple-Silicon-ASM-Examples\n- https://www.reddit.com/r/Assembly_language/comments/1ijt505/executables_smaller_than_33kb_possible_on_macos/\n- https://stackoverflow.com/a/56993314 - arm64 syscalls\n- https://github.com/below/HelloSilicon/blob/main/Chapter%2001/HelloWorld.s\n- https://stackoverflow.com/questions/69974380/how-to-compile-arm-assembly-on-an-m1-macbook\n- https://www.tiraniddo.dev/2010/06/quest-part-2.html?m=1\n\n##### Mach-O Builder Programs / Libraries\n- https://llvm.org/doxygen/MachOWriter_8cpp_source.html#l00660\n- https://github.com/stek29/minmacho\n- https://gist.github.com/mszoek/2916926a57011bc369e0431561f3d5f7 - ravynOS macho loading\n- https://github.com/bluewhalesystems/sold/blob/59577929295b33e80da9e901f09543b4c4446c11/macho/output-chunks.cc\n- https://github.com/Binject/debug/blob/master/macho/write.go","src/content/blog/macho.md","d803a6b9259014d6",{"html":21,"metadata":22},"\u003Cp>The Mach-O file format is the binary file format of executables on MacOS and iOS. The aim of this post is not just to explain the general structure of a Mach-O file, but also to detail which specific components are required to be present in the file for a modern\u003Csup>\u003Ca href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup> MacOS kernel to agree to load and execute it. Weâ€™ll write some Rust code to generate the bytes that make up a Mach-O file, building up from machine code until we have an executable file.\u003C/p>\n\u003Chr>\n\u003Cp>First, we need that machine code. Weâ€™re going to make the smallest program that will have some sort of side effect to tell us whether it ran. Letâ€™s make a program that does nothing but return an exit code. Here it is in ARM64 assembly:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"asm\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">.global _main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#61AFEF\">_main:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    mov\u003C/span>\u003Cspan style=\"color:#ABB2BF\">     x0, \u003C/span>\u003Cspan style=\"color:#C678DD\">64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    mov\u003C/span>\u003Cspan style=\"color:#ABB2BF\">     x16, \u003C/span>\u003Cspan style=\"color:#C678DD\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    svc     \u003C/span>\u003Cspan style=\"color:#D19A66\">0x80\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>We move 64 into the \u003Ccode>x0\u003C/code> register. This means our exit code will be 64.\u003C/li>\n\u003Cli>We move 1 into the \u003Ccode>x16\u003C/code> register. This is the identifier for the \u003Ca href=\"https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/bsd/kern/syscalls.master#L46\">\u003Ccode>EXIT\u003C/code> system call\u003C/a>.\u003C/li>\n\u003Cli>Then we execute the \u003Ccode>svc\u003C/code> instruction to tell the processor that we want to do a syscall. \u003Ccode>0x80\u003C/code> is \u003Ca href=\"https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/libsyscall/custom/SYS.h#L248\">conventionally passed as the immediate\u003C/a>.\u003C/li>\n\u003C/ul>\n\u003Cp>To get the corresponding machine code, we could consult the \u003Ca href=\"https://developer.arm.com/documentation/ddi0602/2025-03\">Arm A-profile A64 Instruction Set Architecture\u003C/a> and encode the instructions manually, but weâ€™ll take a shortcut and get the \u003Ccode>as\u003C/code> assembler to do this for us:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>$ as -o exit_syscall.o exit_syscall.S\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And use \u003Ccode>objdump\u003C/code> to print out the contents:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>$ objdump ./exit_syscall.o --disassemble\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>./exit_syscall.o:       file format mach-o arm64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Disassembly of section __TEXT,__text:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>0000000000000000 &#x3C;ltmp0>:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>       0: d2800800      mov     x0, #64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>       4: d2800030      mov     x16, #1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>       8: d4001001      svc     #0x80\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This means the machine code for our 3-instruction program is \u003Ccode>[d2800800, d2800030, d4001001]\u003C/code>.\nNow to figure out how we can put those instructions into our own Mach-O file!\u003C/p>\n\u003Ch2 id=\"mach-o-file-format\">Mach-O File Format\u003C/h2>\n\u003Cp>We have two primary sources for info on Mach-O files:\u003C/p>\n\u003Cul>\n\u003Cli>the XNU kernel code \u003Ca href=\"https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/EXTERNAL_HEADERS/mach-o/loader.h\">xnu/EXTERNAL_HEADERS/macho/loader.h\u003C/a> - which contains structure definitions, and explanations in the form of comments\u003C/li>\n\u003Cli>the \u003Ca href=\"https://web.archive.org/web/20140904004108/https://developer.apple.com/library/mac/documentation/developertools/conceptual/MachORuntime/Reference/reference.html\">OS X ABI Mach-O File Format Reference\u003C/a> - which contains diagrams but is out of date - it was last online in late 2014, prior to the release of OS X 10.10 Yosemite\u003C/li>\n\u003C/ul>\n\u003Cp>Synthesising some information from the above sources, a Mach-O file consists of:\u003C/p>\n\u003Cul>\n\u003Cli>a header\u003C/li>\n\u003Cli>some â€˜Load Commandsâ€™ that define the structure of the data in the file and how it is to be loaded into memory\u003C/li>\n\u003Cli>data that is referenced by the Load Commands\u003C/li>\n\u003C/ul>\n\u003Ctable class=\"macho-table\" style=\"margin-inline: auto; width: 25rem;\">\n  \u003Ctbody>\u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;\">file header\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;vertical-align: middle;\">load commands\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;\">data\u003C/td>\n  \u003C/tr>\n\u003C/tbody>\u003C/table>\n\u003Cp>Each Mach-O is divided into a number of named areas called â€˜segmentsâ€™ that are loaded into memory as contiguous blocks, and data in a segment may be further divided into named â€˜sectionsâ€™. For example, the \u003Ccode>__TEXT\u003C/code> segment (note the uppercase name) contains the Mach-O header, load commands, and executable code, while the \u003Ccode>__text\u003C/code> section (lowercase) within that segment refers to just the executable code. This is why \u003Ccode>objdump\u003C/code> told us we were looking at the â€˜Disassembly of the \u003Ccode>__TEXT,__text\u003C/code> sectionâ€™ earlier. We will explain other segments and sections as we come across the need for them.\u003C/p>\n\u003Ctable class=\"macho-table\">\n  \u003Ctbody>\u003Ctr>\n    \u003Ctd rowspan=\"3\" style=\"background-color: #ff7340; vertical-align: middle; text-align: center;\">__TEXT segment\u003C/td>\n    \u003Ctd style=\"background-color: #ffb276;\">file header\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;vertical-align: middle;\">load commands\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ffb276;\">__text section data\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ff7340; text-align: center;\">__LINKEDIT segment\u003C/td>\n    \u003Ctd style=\"background-color: #ffb276;\">code signature data\u003C/td>\n  \u003C/tr>\n\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"header\">Header\u003C/h3>\n\u003Cp>This is defined as the \u003Ccode>mach_header_64\u003C/code> struct in \u003Ca href=\"https://github.com/apple-oss-distributions/xnu/blob/8d741a5de7ff4191bf97d57b9f54c2f6d4a15585/EXTERNAL_HEADERS/mach-o/loader.h\">\u003Ccode>loader.h\u003C/code>\u003C/a>:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">struct\u003C/span>\u003Cspan style=\"color:#E5C07B\"> MachHeader64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    magic\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,      \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// mach magic number identifier\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cputype\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,    \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// cpu specifier\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cpusubtype\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// machine specifier\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    filetype\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,   \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// type of file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    ncmds\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,      \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// number of load commands\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    sizeofcmds\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// the size of all the load commands\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,      \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// flags\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,   \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// reserved\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Our header will look like this, at least to start with:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> header\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> MachHeader64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    magic\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">MH_MAGIC_64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,              \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// these bytes tell the OS it is a Mach-O file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cputype\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">CPU_TYPE_ARM64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,         \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// since we are running on an M1 mac\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cpusubtype\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">CPU_SUBTYPE_ARM_ALL\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// ^ as above\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    filetype\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">MH_EXECUTE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,            \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// we want a file that the OS can execute\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    ncmds\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,                        \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// will be incremented as we go\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    sizeofcmds\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,                   \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// will be incremented as we go\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,                        \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// we don't know what flags to include yet\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Weâ€™ll also add a counter that tells us the total length of the file:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E5C07B\"> std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">MachHeader64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"load-commands-segments-and-sections\">Load Commands, Segments and Sections\u003C/h3>\n\u003Cp>Above we learned that our machine code should go in the \u003Ccode>__text\u003C/code> section, inside a \u003Ccode>__TEXT\u003C/code> segment. We can create a segment using the \u003Ccode>LC_SEGMENT_64\u003C/code> load command, and follow it with a \u003Ccode>section64\u003C/code> header:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">struct\u003C/span>\u003Cspan style=\"color:#E5C07B\"> SegmentCommand64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,          \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// LC_SEGMENT_64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,      \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// includes sizeof section_64 structs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    segname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: [\u003C/span>\u003Cspan style=\"color:#E5C07B\">u8\u003C/span>\u003Cspan style=\"color:#ABB2BF\">; \u003C/span>\u003Cspan style=\"color:#D19A66\">16\u003C/span>\u003Cspan style=\"color:#ABB2BF\">], \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// segment name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,       \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// memory address of this segment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,       \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// memory size of this segment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    fileoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,      \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// file offset of this segment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    filesize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,     \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// amount to map from the file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    maxprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,      \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// maximum vm protection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    initprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,     \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// initial vm protection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nsects\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,       \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// number of sections in segment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">struct\u003C/span>\u003Cspan style=\"color:#E5C07B\"> Section64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    sectname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: [\u003C/span>\u003Cspan style=\"color:#E5C07B\">u8\u003C/span>\u003Cspan style=\"color:#ABB2BF\">; \u003C/span>\u003Cspan style=\"color:#D19A66\">16\u003C/span>\u003Cspan style=\"color:#ABB2BF\">], \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// e.g. __text\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    segname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: [\u003C/span>\u003Cspan style=\"color:#E5C07B\">u8\u003C/span>\u003Cspan style=\"color:#ABB2BF\">; \u003C/span>\u003Cspan style=\"color:#D19A66\">16\u003C/span>\u003Cspan style=\"color:#ABB2BF\">],  \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// must match the segment to which it belongs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    addr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,          \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// virtual memory address\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    size\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,          \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// size once loaded into memory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    offset\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,        \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// file offset of the section data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    align\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reloff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nreloc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved2\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved3\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Weâ€™ll fill ours in like this:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: [\u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">; \u003C/span>\u003Cspan style=\"color:#D19A66\">3\u003C/span>\u003Cspan style=\"color:#ABB2BF\">] \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> [\u003C/span>\u003Cspan style=\"color:#D19A66\">0xd2800800\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#D19A66\">0xd2800030\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#D19A66\">0xd4001001\u003C/span>\u003Cspan style=\"color:#ABB2BF\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_segment_vmaddr\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0x100000000\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_segment_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> SegmentCommand64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_SEGMENT_64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">SegmentCommand64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">        + \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">Section64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    segname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: *\u003C/span>\u003Cspan style=\"color:#98C379\">b\"__TEXT\u003C/span>\u003Cspan style=\"color:#56B6C2\">\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u003C/span>\u003Cspan style=\"color:#98C379\">\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,   \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// filled in later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    fileoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,  \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// __TEXT segment begins at the very start of the file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    filesize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// filled in later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    maxprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">VM_PROT_READ\u003C/span>\u003Cspan style=\"color:#56B6C2\"> |\u003C/span>\u003Cspan style=\"color:#D19A66\"> VM_PROT_EXECUTE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    initprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">VM_PROT_READ\u003C/span>\u003Cspan style=\"color:#56B6C2\"> |\u003C/span>\u003Cspan style=\"color:#D19A66\"> VM_PROT_EXECUTE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nsects\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.filesize \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> + \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of_val\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.vmsize \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#61AFEF\"> align\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.filesize, \u003C/span>\u003Cspan style=\"color:#D19A66\">0x4000\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E5C07B\"> std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of_val\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_section_header\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> Section64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    sectname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: *\u003C/span>\u003Cspan style=\"color:#98C379\">b\"__text\u003C/span>\u003Cspan style=\"color:#56B6C2\">\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u003C/span>\u003Cspan style=\"color:#98C379\">\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    segname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: *\u003C/span>\u003Cspan style=\"color:#98C379\">b\"__TEXT\u003C/span>\u003Cspan style=\"color:#56B6C2\">\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u003C/span>\u003Cspan style=\"color:#98C379\">\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    addr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// filled in later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    size\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of_val\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    offset\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// filled in later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    align\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x2\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reloff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nreloc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x80000400\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved2\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    reserved3\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E5C07B\"> std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of_val\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.offset \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> bytes_reserved\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And update the file header:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Finally we write all this to a file and make it executable:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> output\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> File\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">create\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#98C379\">\"return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> executable\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> Permissions\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">from_mode\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#D19A66\">0o755\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">fs\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">set_permissions\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#98C379\">\"return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#E06C75\">executable\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Awesome, it has been a bit of work to get to this stage, but by now we have a Mach-O executable with a header, a \u003Ccode>__TEXT\u003C/code> segment, and inside that a \u003Ccode>__text\u003C/code> section containing our machine code. \u003Ccode>otool\u003C/code> can show us the details and doesnâ€™t complain:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>$ otool -lhtv return64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>return64:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Mach header\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      magic  cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>MH_MAGIC_64    ARM64        ALL  0x00     EXECUTE     1        152 0x00000000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Load command 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      cmd LC_SEGMENT_64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  cmdsize 152\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  segname __TEXT\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   vmaddr 0x0000000000000000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   vmsize 0x0000000000004000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  fileoff 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> filesize 164\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  maxprot ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> initprot ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   nsects 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    flags (none)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Section\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  sectname __text\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   segname __TEXT\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      addr 0x0000000000000000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      size 0x000000000000000c\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    offset 184\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     align 2^0 (1)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    reloff 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    nreloc 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      type S_REGULAR\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>attributes (none)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> reserved1 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> reserved2 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>(__TEXT,__text) section\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>0000000000000000        mov     x0, #0x40\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>0000000000000004        mov     x16, #0x1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>0000000000000008        svc     #0x80\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Letâ€™s try to run it!\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>$ ./return64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Killed: 9\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Oh. I guess it wasnâ€™t going to be that easy.\u003C/p>\n\u003Ch2 id=\"secrets-of-mach_loaderc\">Secrets of mach_loader.c\u003C/h2>\n\u003Cp>To figure out the rest of the requirements we will need to dive into the source code that Apple provides for the XNU kernel, specifically the \u003Ccode>parse_machfile()\u003C/code> function in \u003Ca href=\"https://github.com/apple-oss-distributions/xnu/blob/e3723e1f17661b24996789d8afc084c0c3303b26/bsd/kern/mach_loader.c#L140\">\u003Ccode>mach_loader.c\u003C/code>\u003C/a>.\u003C/p>\n\u003Cp>Here are the relevant excerpts:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (header\u003C/span>\u003Cspan style=\"color:#C678DD\">->\u003C/span>\u003Cspan style=\"color:#ABB2BF\">flags \u003C/span>\u003Cspan style=\"color:#C678DD\">&#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> MH_DYLDLINK) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">    /* Check properties of dynamic executables */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"color:#56B6C2\">!\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E5C07B\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">flags\u003C/span>\u003Cspan style=\"color:#C678DD\"> &#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> MH_PIE) \u003C/span>\u003Cspan style=\"color:#56B6C2\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#61AFEF\"> pie_required\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E5C07B\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">cputype\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#E5C07B\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">cpusubtype\u003C/span>\u003Cspan style=\"color:#C678DD\"> &#x26;\u003C/span>\u003Cspan style=\"color:#C678DD\"> ~\u003C/span>\u003Cspan style=\"color:#ABB2BF\">CPU_SUBTYPE_MASK)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">        return\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_FAILURE;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E5C07B\">    result\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">needs_dynlinker\u003C/span>\u003Cspan style=\"color:#C678DD\"> =\u003C/span>\u003Cspan style=\"color:#D19A66\"> TRUE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">} \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">} \u003C/span>\u003Cspan style=\"color:#C678DD\">else\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    return\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_FAILURE;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This tells us we must set the DYLD_LINK and MH_PIE flags in the file header.\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">case LC_LOAD_DYLINKER:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">        dlp \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"color:#C678DD\">struct\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> dylinker_command \u003C/span>\u003Cspan style=\"color:#C678DD\">*\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)lcp;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">// combined with:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (ret \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_SUCCESS) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">    /* Make sure if we need dyld, we got it */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"color:#E5C07B\">result\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">needs_dynlinker\u003C/span>\u003Cspan style=\"color:#56B6C2\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#56B6C2\"> !\u003C/span>\u003Cspan style=\"color:#ABB2BF\">dlp) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">        ret \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_FAILURE;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We need a LOAD_DYLINKER load command.\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (ret \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_SUCCESS \u003C/span>\u003Cspan style=\"color:#56B6C2\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> scp64\u003C/span>\u003Cspan style=\"color:#C678DD\">->\u003C/span>\u003Cspan style=\"color:#ABB2BF\">fileoff \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#56B6C2\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> scp64\u003C/span>\u003Cspan style=\"color:#C678DD\">->\u003C/span>\u003Cspan style=\"color:#ABB2BF\">filesize \u003C/span>\u003Cspan style=\"color:#C678DD\">>\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">    /* Enforce a single segment mapping offset zero, with R+X\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">     * protection. */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (found_header_segment \u003C/span>\u003Cspan style=\"color:#56B6C2\">||\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">        ((\u003C/span>\u003Cspan style=\"color:#E5C07B\">scp64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">initprot\u003C/span>\u003Cspan style=\"color:#C678DD\"> &#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (VM_PROT_READ \u003C/span>\u003Cspan style=\"color:#C678DD\">|\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> VM_PROT_EXECUTE)) \u003C/span>\u003Cspan style=\"color:#C678DD\">!=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (VM_PROT_READ \u003C/span>\u003Cspan style=\"color:#C678DD\">|\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> VM_PROT_EXECUTE))) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">        ret \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_BADMACHO;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">        break\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    found_header_segment \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#D19A66\"> TRUE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The first segment we load must have initprot set to READ and EXECUTE.\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> ((file_offset \u003C/span>\u003Cspan style=\"color:#C678DD\">&#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> PAGE_MASK_64) \u003C/span>\u003Cspan style=\"color:#C678DD\">!=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#56B6C2\"> ||\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">    /* we can't mmap() it if it's not page-aligned in the file */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    return\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_BADMACHO;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>All segments must be aligned to an offset in the file that is a multiple of the 16kiB page size. This is already the case since the \u003Ccode>__TEXT\u003C/code> segment has offset 0, but we will need to take this into account when adding more segments.\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"color:#56B6C2\">!\u003C/span>\u003Cspan style=\"color:#ABB2BF\">got_code_signatures \u003C/span>\u003Cspan style=\"color:#56B6C2\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#61AFEF\"> cs_process_global_enforcement\u003C/span>\u003Cspan style=\"color:#ABB2BF\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ret \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_FAILURE;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">// combined with\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">case LC_CODE_SIGNATURE:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">    /* CODE SIGNING */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">        got_code_signatures \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#D19A66\"> TRUE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We need a CODE_SIGNATURE load command.\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (result\u003C/span>\u003Cspan style=\"color:#C678DD\">->\u003C/span>\u003Cspan style=\"color:#ABB2BF\">thread_count \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    ret \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_FAILURE;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">// combined with\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">static\u003C/span>\u003Cspan style=\"color:#56B6C2\"> load_return_t\u003C/span>\u003Cspan style=\"color:#61AFEF\"> load_main\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E06C75\">... \u003C/span>\u003Cspan style=\"color:#ABB2BF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E5C07B\">    result\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">thread_count\u003C/span>\u003Cspan style=\"color:#C678DD\">++\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We need LC_MAIN or LC_UNIXTHREAD. We choose LC_MAIN over LC_UNIXTHREAD as it is simpler.\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (enforce_hard_pagezero \u003C/span>\u003Cspan style=\"color:#56B6C2\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">    /* 64 bit ARM binary must have \"hard page zero\" of 4GB to cover the lower 32 bit address space */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    (\u003C/span>\u003Cspan style=\"color:#61AFEF\">vm_map_has_hard_pagezero\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E06C75\">map\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003Cspan style=\"color:#E06C75\"> 0x\u003C/span>\u003Cspan style=\"color:#D19A66\">100000000\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#D19A66\"> FALSE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">        return\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_BADMACHO;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We need a â€˜PAGEZEROâ€™ segment.\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (scp\u003C/span>\u003Cspan style=\"color:#C678DD\">->\u003C/span>\u003Cspan style=\"color:#ABB2BF\">initprot \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#56B6C2\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> scp\u003C/span>\u003Cspan style=\"color:#C678DD\">->\u003C/span>\u003Cspan style=\"color:#ABB2BF\">maxprot \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#56B6C2\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> scp\u003C/span>\u003Cspan style=\"color:#C678DD\">->\u003C/span>\u003Cspan style=\"color:#ABB2BF\">vmaddr \u003C/span>\u003Cspan style=\"color:#C678DD\">==\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">    /* PAGEZERO */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">    if\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"color:#61AFEF\">os_add3_overflow\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E5C07B\">scp\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#E5C07B\">scp\u003C/span>\u003Cspan style=\"color:#ABB2BF\">->\u003C/span>\u003Cspan style=\"color:#E06C75\">vmsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, slide, \u003C/span>\u003Cspan style=\"color:#C678DD\">&#x26;\u003C/span>\u003Cspan style=\"color:#ABB2BF\">pagezero_end) \u003C/span>\u003Cspan style=\"color:#56B6C2\">||\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> pagezero_end \u003C/span>\u003Cspan style=\"color:#C678DD\">>\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> UINT32_MAX) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">        ret \u003C/span>\u003Cspan style=\"color:#C678DD\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> LOAD_BADMACHO;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">        break\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The PAGEZERO segment must have \u003Ccode>initprot\u003C/code> and \u003Ccode>maxprot\u003C/code> set to \u003Ccode>VM_PROT_NONE\u003C/code> (0).\u003C/p>\n\u003Cp>Summarising, we need to add:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>__PAGEZERO\u003C/code> segment of size 4GB, starting at vmaddr of 0x0, with initprot and maxprot set to 0\u003C/li>\n\u003Cli>\u003Ccode>LC_MAIN\u003C/code> load command\u003C/li>\n\u003Cli>\u003Ccode>LC_LOAD_DYLINKER\u003C/code> load command\u003C/li>\n\u003Cli>\u003Ccode>LC_CODE_SIGNATURE\u003C/code> load command\u003C/li>\n\u003C/ul>\n\u003Cp>Going through those:\n\u003Ccode>__PAGEZERO\u003C/code> is straightforward, it is just another \u003Ccode>LC_SEGMENT_64\u003C/code> command:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> pagezero_seg_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> SegmentCommand64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_SEGMENT_64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">SegmentCommand64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    segname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: *\u003C/span>\u003Cspan style=\"color:#98C379\">b\"__PAGEZERO\u003C/span>\u003Cspan style=\"color:#56B6C2\">\\0\\0\\0\\0\\0\\0\u003C/span>\u003Cspan style=\"color:#98C379\">\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x100000000\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    fileoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,  \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// empty so we don't need an offset\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    filesize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// empty so we don't need a physical size\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    maxprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,  \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// must be VM_PROT_NONE for PAGEZERO\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    initprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// must be VM_PROT_NONE for PAGEZERO\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nsects\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,     \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// doesn't contain any sections\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E5C07B\"> std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of_val\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">pagezero_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> pagezero_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For \u003Ccode>LC_MAIN\u003C/code>, we just need to make sure we compute the correct file offset of the \u003Ccode>__text\u003C/code> section data:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E5C07B\"> std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">EntryPointCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.addr \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> + \u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> main_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> EntryPointCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_MAIN\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">EntryPointCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    entryoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,  \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// Updated later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    stacksize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// if we put zero, the kernel fills it with a default value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> main_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We can fix our flags as so:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.flags \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#D19A66\"> MH_PIE\u003C/span>\u003Cspan style=\"color:#56B6C2\"> |\u003C/span>\u003Cspan style=\"color:#D19A66\"> MH_DYLDLINK\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Add \u003Ccode>LC_LOAD_DYLINKER\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> dylinker_name\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#98C379\"> \"/usr/lib/dyld\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">to_string\u003C/span>\u003Cspan style=\"color:#ABB2BF\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> padded_cmd_len\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#61AFEF\"> align\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E5C07B\">    std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">DylinkerCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> + \u003C/span>\u003Cspan style=\"color:#E06C75\">dylinker_name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">len\u003C/span>\u003Cspan style=\"color:#ABB2BF\">() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D19A66\">    8\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">); \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// cmdsize must be a multiple of 8, so we add padding\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> padded_name_len\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E06C75\"> padded_cmd_len\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> - \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">DylinkerCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> padded_dylinker_name\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#61AFEF\"> vec!\u003C/span>\u003Cspan style=\"color:#ABB2BF\">[\u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">; \u003C/span>\u003Cspan style=\"color:#E06C75\">padded_name_len\u003C/span>\u003Cspan style=\"color:#ABB2BF\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">padded_dylinker_name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">[..\u003C/span>\u003Cspan style=\"color:#E06C75\">dylinker_name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">len\u003C/span>\u003Cspan style=\"color:#ABB2BF\">()].\u003C/span>\u003Cspan style=\"color:#61AFEF\">copy_from_slice\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">dylinker_name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">as_bytes\u003C/span>\u003Cspan style=\"color:#ABB2BF\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> dylinker_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> DylinkerCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_LOAD_DYLINKER\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: (\u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">DylinkerCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() + \u003C/span>\u003Cspan style=\"color:#E06C75\">padded_dylinker_name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">len\u003C/span>\u003Cspan style=\"color:#ABB2BF\">()) \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">DylinkerCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E06C75\"> dylinker_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> dylinker_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"sign-here-please---adding-a-code-signature\">Sign here please - Adding a code signature\u003C/h2>\n\u003Cp>The code signature is another story. All binaries are required to be signed before they are run. For programs that will be distributed, this would be performed using an official Apple Developer account, but there is a type of signature called an â€˜ad-hocâ€™ signature that allows a program to run on your computer only. You can read \u003Ca href=\"https://github.com/qyang-nj/llios/blob/main/macho_parser/docs/LC_CODE_SIGNATURE.md\">llios/macho_parser\u003C/a> for details on the format of code signatures, as we will delegate code signing to the \u003Ca href=\"https://gregoryszorc.com/docs/apple-codesign/0.17.0/apple_codesign_getting_started.html#installing\">rcodesign\u003C/a> utility that has re-implemented Appleâ€™s code signing process. It doesnâ€™t do all the work for us: it can only replace an existing signature, so we must write our own empty one first and place it in the \u003Ccode>__LINKEDIT\u003C/code> segment.\u003C/p>\n\u003Cp>First we create the \u003Ccode>__LINKEDIT\u003C/code> segment:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> linkedit_seg_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> SegmentCommand64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_SEGMENT_64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">SegmentCommand64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    segname\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: *\u003C/span>\u003Cspan style=\"color:#98C379\">b\"__LINKEDIT\u003C/span>\u003Cspan style=\"color:#56B6C2\">\\0\\0\\0\\0\\0\\0\u003C/span>\u003Cspan style=\"color:#98C379\">\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.vmaddr + \u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.vmsize,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    vmsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x4000\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    fileoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,  \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// Updated later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    filesize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// Updated later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    maxprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    initprot\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0x0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nsects\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    flags\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E06C75\"> linkedit_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> linkedit_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then we create a load command for the code signature:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> codesig_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> LinkeditDataCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_CODE_SIGNATURE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">LinkeditDataCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    dataoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,  \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// Updated later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    datasize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#7F848E;font-style:italic\">// Updated later\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> codesig_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E06C75\"> codesig_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Since this is now the final load command, we update the text section offset:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.offset \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> bytes_reserved\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E5C07B\"> std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of_val\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">main_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.entryoff \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.offset \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.addr \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> (\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.offset \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> + \u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_vmaddr\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>To ensure that the start of the \u003Ccode>__LINKEDIT\u003C/code> segment is page-aligned, we must add padding to the end of the \u003Ccode>__TEXT\u003C/code> segment:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_sec_end\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#61AFEF\"> align\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.offset \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> + \u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">len\u003C/span>\u003Cspan style=\"color:#ABB2BF\">() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D19A66\">    0x4000\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_seg_padding_len\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    text_sec_end\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> - \u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.offset \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> - \u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of_val\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">) \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_seg_padding_len\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.filesize \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> bytes_reserved\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">if\u003C/span>\u003Cspan style=\"color:#E06C75\"> text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.filesize % \u003C/span>\u003Cspan style=\"color:#D19A66\">0x4000\u003C/span>\u003Cspan style=\"color:#56B6C2\"> !=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.vmsize \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#61AFEF\"> align\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.filesize, \u003C/span>\u003Cspan style=\"color:#D19A66\">0x4000\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now we add a placeholder for the code signature, to satisfy \u003Ccode>rcodesign\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> codesig\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> [\u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">; \u003C/span>\u003Cspan style=\"color:#D19A66\">16\u003C/span>\u003Cspan style=\"color:#ABB2BF\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> superblob_length\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#D19A66\"> 12\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> superblob_count\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">u32\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#D19A66\"> 0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">codesig\u003C/span>\u003Cspan style=\"color:#ABB2BF\">[\u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">..\u003C/span>\u003Cspan style=\"color:#D19A66\">4\u003C/span>\u003Cspan style=\"color:#ABB2BF\">].\u003C/span>\u003Cspan style=\"color:#61AFEF\">copy_from_slice\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#D19A66\">CSMAGIC_EMBEDDED_SIGNATURE\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">to_be_bytes\u003C/span>\u003Cspan style=\"color:#ABB2BF\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">codesig\u003C/span>\u003Cspan style=\"color:#ABB2BF\">[\u003C/span>\u003Cspan style=\"color:#D19A66\">4\u003C/span>\u003Cspan style=\"color:#ABB2BF\">..\u003C/span>\u003Cspan style=\"color:#D19A66\">8\u003C/span>\u003Cspan style=\"color:#ABB2BF\">].\u003C/span>\u003Cspan style=\"color:#61AFEF\">copy_from_slice\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">superblob_length\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">to_be_bytes\u003C/span>\u003Cspan style=\"color:#ABB2BF\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">codesig\u003C/span>\u003Cspan style=\"color:#ABB2BF\">[\u003C/span>\u003Cspan style=\"color:#D19A66\">8\u003C/span>\u003Cspan style=\"color:#ABB2BF\">..\u003C/span>\u003Cspan style=\"color:#D19A66\">12\u003C/span>\u003Cspan style=\"color:#ABB2BF\">].\u003C/span>\u003Cspan style=\"color:#61AFEF\">copy_from_slice\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">superblob_count\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">to_be_bytes\u003C/span>\u003Cspan style=\"color:#ABB2BF\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7F848E;font-style:italic\">// Update linkedit details\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">linkedit_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.fileoff \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> bytes_reserved\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">linkedit_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.filesize \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> codesig\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">len\u003C/span>\u003Cspan style=\"color:#ABB2BF\">() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u64\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">codesig_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.dataoff \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> bytes_reserved\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">codesig_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.datasize \u003C/span>\u003Cspan style=\"color:#56B6C2\">=\u003C/span>\u003Cspan style=\"color:#E06C75\"> codesig\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">len\u003C/span>\u003Cspan style=\"color:#ABB2BF\">() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We write the binary to a file, much like before:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> output\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> File\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">create\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#98C379\">\"return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_segment_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">pagezero_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">main_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">dylinker_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">padded_dylinker_name\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">linkedit_seg_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">codesig_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">dysymtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">symtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#61AFEF\">vec!\u003C/span>\u003Cspan style=\"color:#ABB2BF\">[\u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">; \u003C/span>\u003Cspan style=\"color:#E06C75\">text_seg_padding_len\u003C/span>\u003Cspan style=\"color:#C678DD\"> as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">])?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">codesig\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> executable\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> Permissions\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">from_mode\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#D19A66\">0o755\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">fs\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">set_permissions\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#98C379\">\"return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#E06C75\">executable\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Finally we can perform the code signing step:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> file_bytes\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">fs\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">read\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#98C379\">\"return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> signer\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> apple_codesign\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">MachOSigner\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">new\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">file_bytes\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> output\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> File\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">create\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#98C379\">\"return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> settings\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> SigningSettings\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">default\u003C/span>\u003Cspan style=\"color:#ABB2BF\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">settings\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">set_binary_identifier\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#E5C07B\">SettingsScope\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">Main\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, \u003C/span>\u003Cspan style=\"color:#98C379\">\"com.simple_macho.return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">signer\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_signed_binary\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">settings\u003C/span>\u003Cspan style=\"color:#ABB2BF\">, &#x26;\u003C/span>\u003Cspan style=\"color:#C678DD\">mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Running the resulting binary does not quite work:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>$ ./return64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Segmentation fault: 11\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>$ lldb return64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>(lldb) target create \"return64\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Current executable set to '/simple_macho/return64' (arm64).\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>(lldb) run\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Process 16199 launched: '/simple_macho/return64' (arm64)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Process 16199 stopped\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>* thread #1, stop reason = EXC_BAD_ACCESS (code=1, address=0x48)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    frame #0: 0x000000019102770c dyld`dyld3::MachOAnalyzer::forEachRebase_Relocations(Diagnostics&#x26;, dyld3::MachOLoaded::LinkEditInfo const&#x26;, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&#x26;, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&#x26;) block_pointer) const + 120\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>dyld`dyld3::MachOAnalyzer::forEachRebase_Relocations:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>->  0x19102770c &#x3C;+120>: ldr    w2, [x8, #0x48]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    0x191027710 &#x3C;+124>: mov    x0, x20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    0x191027714 &#x3C;+128>: mov    x1, x24\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    0x191027718 &#x3C;+132>: bl     0x19101b51c               ; dyld3::MachOLoaded::getLinkEditContent(dyld3::MachOLoaded::LayoutInfo const&#x26;, unsigned int) const\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Target 0: (return64) stopped.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"symtab-and-dysymtab\">SYMTAB and DYSYMTAB\u003C/h2>\n\u003Cp>We seem to be getting a null pointer dereference inside DYLD, the dynamic loader. I couldnâ€™t track down any documentation explicitly stating this, but experimentation confirms that DYLD requires DYSYMTAB and SYMTAB load commands to be present. Luckily, we can create empty tables, by adding these load commands:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> dysymtab_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> DysymtabCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_DYSYMTAB\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">DysymtabCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    ilocalsym\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nlocalsym\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    iextdefsym\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nextdefsym\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    iundefsym\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nundefsym\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    tocoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    ntoc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    modtaboff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nmodtab\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    extrefsymoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nextrefsyms\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    indirectsymoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nindirectsyms\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    extreloff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nextrel\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    locreloff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nlocrel\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> dysymtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E06C75\"> dysymtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#E06C75\"> symtab_lc\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> SymtabCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmd\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">LC_SYMTAB\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    cmdsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#E5C07B\">std\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#E5C07B\">mem\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">size_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::&#x3C;\u003C/span>\u003Cspan style=\"color:#E5C07B\">SymtabCommand\u003C/span>\u003Cspan style=\"color:#ABB2BF\">>() \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> u32\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    symoff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    nsyms\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    stroff\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">    strsize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">: \u003C/span>\u003Cspan style=\"color:#D19A66\">0\u003C/span>\u003Cspan style=\"color:#ABB2BF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.ncmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#D19A66\"> 1\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.sizeofcmds \u003C/span>\u003Cspan style=\"color:#56B6C2\">+=\u003C/span>\u003Cspan style=\"color:#E06C75\"> symtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">bytes_reserved\u003C/span>\u003Cspan style=\"color:#56B6C2\"> +=\u003C/span>\u003Cspan style=\"color:#E06C75\"> symtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.cmdsize \u003C/span>\u003Cspan style=\"color:#C678DD\">as\u003C/span>\u003Cspan style=\"color:#E5C07B\"> usize\u003C/span>\u003Cspan style=\"color:#ABB2BF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#C678DD\">let\u003C/span>\u003Cspan style=\"color:#C678DD\"> mut\u003C/span>\u003Cspan style=\"color:#E06C75\"> output\u003C/span>\u003Cspan style=\"color:#56B6C2\"> =\u003C/span>\u003Cspan style=\"color:#E5C07B\"> File\u003C/span>\u003Cspan style=\"color:#ABB2BF\">::\u003C/span>\u003Cspan style=\"color:#61AFEF\">create\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#98C379\">\"return64\"\u003C/span>\u003Cspan style=\"color:#ABB2BF\">)?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">header\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">codesig_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">dysymtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">symtab_lc\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E06C75\">output\u003C/span>\u003Cspan style=\"color:#ABB2BF\">.\u003C/span>\u003Cspan style=\"color:#61AFEF\">write_all\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(\u003C/span>\u003Cspan style=\"color:#61AFEF\">bytes_of\u003C/span>\u003Cspan style=\"color:#ABB2BF\">(&#x26;\u003C/span>\u003Cspan style=\"color:#E06C75\">text_section_data\u003C/span>\u003Cspan style=\"color:#ABB2BF\">))?;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#ABB2BF\">...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"at-last-a-working-executable\">At last, a working executable\u003C/h2>\n\u003Cp>We can run the program and print its return code:\u003C/p>\n\u003Cpre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>$ ./return64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>$ echo $?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>64\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The final file consists of:\u003C/p>\n\u003Ctable class=\"macho-table\">\n  \u003Ctbody>\u003Ctr>\n    \u003Ctd rowspan=\"10\" style=\"background-color: #ff7340; vertical-align: middle; text-align: center;\">__TEXT segment\u003C/td>\n    \u003Ctd colspan=\"3\" style=\"background-color: #ffb276;\">file header\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd rowspan=\"8\" style=\"background-color: #ffb276;vertical-align: middle;\">load commands\u003C/td>\n    \u003Ctd>LC_SEGMENT_64 (__TEXT)\u003C/td>\n    \u003Ctd style=\"background-color: white;\">Section Header (__text)\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_SEGMENT_64 (__PAGEZERO)\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_MAIN\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_LOAD_DYLINKER\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_SEGMENT_64 (__LINKEDIT)\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_CODE_SIGNATURE\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_DYSYMTAB\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"2\">LC_SYMTAB\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd colspan=\"3\" style=\"background-color: #ffb276;\">__text section\u003C/td>\n  \u003C/tr>\n  \u003Ctr>\n    \u003Ctd style=\"background-color: #ff7340; text-align: center;\">__LINKEDIT segment\u003C/td>\n    \u003Ctd colspan=\"3\" style=\"background-color: #ffb276;\">code signature\u003C/td>\n  \u003C/tr>\n\u003C/tbody>\u003C/table>\n\u003Cp>This is the simplest valid Mach-O executable that I could construct.\u003C/p>\n\u003Ch4 id=\"other-resources-on-mach-o-files\">Other Resources on Mach-O Files\u003C/h4>\n\u003Ch5 id=\"mach-o-general\">Mach-O General\u003C/h5>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://alexdremov.me/mystery-of-mach-o-object-file-builders/\">https://alexdremov.me/mystery-of-mach-o-object-file-builders/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.archive.org/web/20140904004108/https://developer.apple.com/library/mac/documentation/developertools/conceptual/MachORuntime/Reference/reference.html\">https://web.archive.org/web/20140904004108/https://developer.apple.com/library/mac/documentation/developertools/conceptual/MachORuntime/Reference/reference.html\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.reinterpretcast.com/hello-world-mach-o\">https://www.reinterpretcast.com/hello-world-mach-o\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html\">https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html\u003C/a> - Unforunately a bit old and therefore x86_64-centric\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html\">https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://lief.re/doc/latest/tutorials/11_macho_modification.html\">https://lief.re/doc/latest/tutorials/11_macho_modification.html\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.objc.io/issues/6-build-tools/mach-o-executables/\">https://www.objc.io/issues/6-build-tools/mach-o-executables/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.symbolcrash.com/2019/02/25/so-you-want-to-be-a-mach-o-man/\">https://www.symbolcrash.com/2019/02/25/so-you-want-to-be-a-mach-o-man/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://lowlevelbits.org/parsing-mach-o-files/\">https://lowlevelbits.org/parsing-mach-o-files/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/opensource-apple/dyld/blob/master/src/ImageLoaderMachO.cpp\">https://github.com/opensource-apple/dyld/blob/master/src/ImageLoaderMachO.cpp\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://blog.xpnsec.com/building-a-mach-o-memory-loader-part-1/\">https://blog.xpnsec.com/building-a-mach-o-memory-loader-part-1/\u003C/a>\u003C/li>\n\u003Cli>Tried this machodump tool \u003Ca href=\"https://github.com/RedMapleTech/machodump\">https://github.com/RedMapleTech/machodump\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch5 id=\"similar-attempts-to-create-valid-mach-o-files\">Similar attempts to create valid Mach-O files\u003C/h5>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://stackoverflow.com/questions/68977603/handmade-macos-executable?rq=3\">https://stackoverflow.com/questions/68977603/handmade-macos-executable?rq=3\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://stackoverflow.com/questions/39863112/what-is-required-for-a-mach-o-executable-to-load\">https://stackoverflow.com/questions/39863112/what-is-required-for-a-mach-o-executable-to-load\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://stackoverflow.com/questions/74659322/why-is-hello-world-in-assembly-for-arm-mac-invalid\">https://stackoverflow.com/questions/74659322/why-is-hello-world-in-assembly-for-arm-mac-invalid\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://codegolf.stackexchange.com/questions/102471/smallest-possible-runnable-mach-o-executable\">https://codegolf.stackexchange.com/questions/102471/smallest-possible-runnable-mach-o-executable\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://stackoverflow.com/questions/71723764/why-does-macos-kill-static-executables-created-by-clang\">https://stackoverflow.com/questions/71723764/why-does-macos-kill-static-executables-created-by-clang\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://seriot.ch/projects/hello_macho.html\">https://seriot.ch/projects/hello_macho.html\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch5 id=\"mach-o-codesigning\">Mach-O Codesigning\u003C/h5>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://knight.sc/reverse%20engineering/2019/02/20/syspolicyd-internals.html\">https://knight.sc/reverse%20engineering/2019/02/20/syspolicyd-internals.html\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://hexiosec.com/blog/macho-files/\">https://hexiosec.com/blog/macho-files/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://gregoryszorc.com/docs/apple-codesign/0.17.0/apple_codesign_gatekeeper.html\">https://gregoryszorc.com/docs/apple-codesign/0.17.0/apple_codesign_gatekeeper.html\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/Homebrew/brew/issues/9082\">https://github.com/Homebrew/brew/issues/9082\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/nodejs/node/issues/40827\">https://github.com/nodejs/node/issues/40827\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch5 id=\"assembly-and-syscalls\">Assembly and syscalls\u003C/h5>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/jdshaffer/Apple-Silicon-ASM-Examples\">https://github.com/jdshaffer/Apple-Silicon-ASM-Examples\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.reddit.com/r/Assembly_language/comments/1ijt505/executables_smaller_than_33kb_possible_on_macos/\">https://www.reddit.com/r/Assembly_language/comments/1ijt505/executables_smaller_than_33kb_possible_on_macos/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://stackoverflow.com/a/56993314\">https://stackoverflow.com/a/56993314\u003C/a> - arm64 syscalls\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/below/HelloSilicon/blob/main/Chapter%2001/HelloWorld.s\">https://github.com/below/HelloSilicon/blob/main/Chapter%2001/HelloWorld.s\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://stackoverflow.com/questions/69974380/how-to-compile-arm-assembly-on-an-m1-macbook\">https://stackoverflow.com/questions/69974380/how-to-compile-arm-assembly-on-an-m1-macbook\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.tiraniddo.dev/2010/06/quest-part-2.html?m=1\">https://www.tiraniddo.dev/2010/06/quest-part-2.html?m=1\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch5 id=\"mach-o-builder-programs--libraries\">Mach-O Builder Programs / Libraries\u003C/h5>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://llvm.org/doxygen/MachOWriter_8cpp_source.html#l00660\">https://llvm.org/doxygen/MachOWriter_8cpp_source.html#l00660\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/stek29/minmacho\">https://github.com/stek29/minmacho\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://gist.github.com/mszoek/2916926a57011bc369e0431561f3d5f7\">https://gist.github.com/mszoek/2916926a57011bc369e0431561f3d5f7\u003C/a> - ravynOS macho loading\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/bluewhalesystems/sold/blob/59577929295b33e80da9e901f09543b4c4446c11/macho/output-chunks.cc\">https://github.com/bluewhalesystems/sold/blob/59577929295b33e80da9e901f09543b4c4446c11/macho/output-chunks.cc\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/Binject/debug/blob/master/macho/write.go\">https://github.com/Binject/debug/blob/master/macho/write.go\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-1\">\n\u003Cp>MacOS Sonoma 14.4 running on an M1 MacBook Pro \u003Ca href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">â†©\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":23,"localImagePaths":70,"remoteImagePaths":71,"frontmatter":72,"imagePaths":74},[24,28,32,35,38,41,44,47,51,55,58,61,64,67],{"depth":25,"slug":26,"text":27},2,"mach-o-file-format","Mach-O File Format",{"depth":29,"slug":30,"text":31},3,"header","Header",{"depth":29,"slug":33,"text":34},"load-commands-segments-and-sections","Load Commands, Segments and Sections",{"depth":25,"slug":36,"text":37},"secrets-of-mach_loaderc","Secrets of mach_loader.c",{"depth":25,"slug":39,"text":40},"sign-here-please---adding-a-code-signature","Sign here please - Adding a code signature",{"depth":25,"slug":42,"text":43},"symtab-and-dysymtab","SYMTAB and DYSYMTAB",{"depth":25,"slug":45,"text":46},"at-last-a-working-executable","At last, a working executable",{"depth":48,"slug":49,"text":50},4,"other-resources-on-mach-o-files","Other Resources on Mach-O Files",{"depth":52,"slug":53,"text":54},5,"mach-o-general","Mach-O General",{"depth":52,"slug":56,"text":57},"similar-attempts-to-create-valid-mach-o-files","Similar attempts to create valid Mach-O files",{"depth":52,"slug":59,"text":60},"mach-o-codesigning","Mach-O Codesigning",{"depth":52,"slug":62,"text":63},"assembly-and-syscalls","Assembly and syscalls",{"depth":52,"slug":65,"text":66},"mach-o-builder-programs--libraries","Mach-O Builder Programs / Libraries",{"depth":25,"slug":68,"text":69},"footnote-label","Footnotes",[],[],{"title":14,"pubDate":73,"description":15},"Jul 23 2025",[]]